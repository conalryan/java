// Java Generics

Why Use Generics?

In a nutshell, generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and
methods. Much like the more familiar formal parameters used in method declarations, type parameters provide a way for
you to re-use the same code with different inputs. The difference is that the inputs to formal parameters are values,
while the inputs to type parameters are types.

Code that uses generics has many benefits over non-generic code:

Stronger type checks at compile time.
A Java compiler applies strong type checking to generic code and issues errors if the code violates type safety. Fixing
 compile-time errors is easier than fixing runtime errors, which can be difficult to find.

//-----------------------------------------------------------------------------
Generic Types

A generic type is a generic class or interface that is parameterized over types. The following Box class will be
 modified to demonstrate the concept.

Since its methods accept or return an Object, you are free to pass in whatever you want, provided that it is not one
 of the primitive types. There is no way to verify, at compile time, how the class is used. One part of the code may
 place an Integer in the box and expect to get Integers out of it, while another part of the code may mistakenly pass
 in a String, resulting in a runtime error.

A Generic Version of the Box Class
A generic class is defined with the following format:

class name<T1, T2, ..., Tn> { /* ... */ }
The type parameter section, delimited by angle brackets (<>), follows the class name. It specifies the type parameters
(also called type variables) T1, T2, ..., and Tn.

/**
 * Generic version of the Box class.
 * @param <T> the type of the value being boxed
 */
public class Box<T> {
    // T stands for "Type"
    private T t;

    public void set(T t) { this.t = t; }
    public T get() { return t; }
}

As you can see, all occurrences of Object are replaced by T. A type variable can be any non-primitive type you specify:
 any class type, any interface type, any array type, or even another type variable.

This same technique can be applied to create generic interfaces.

//-----------------------------------------------------------------------------
Type Parameter Naming Conventions

By convention, type parameter names are single, uppercase letters. This stands in sharp contrast to the variable naming
 conventions that you already know about, and with good reason: Without this convention, it would be difficult to tell
  the difference between a type variable and an ordinary class or interface name.

The most commonly used type parameter names are:
E - Element (used extensively by the Java Collections Framework)
K - Key
N - Number
T - Type
V - Value
S,U,V etc. - 2nd, 3rd, 4th types

//-----------------------------------------------------------------------------
Invoking and Instantiating a Generic Type

To reference the generic Box class from within your code, you must perform a generic type invocation, which replaces T
with some concrete value, such as Integer:

Box<Integer> integerBox;
You can think of a generic type invocation as being similar to an ordinary method invocation, but instead of passing an
 argument to a method, you are passing a type argument — Integer in this case — to the Box class itself.

Type Parameter and Type Argument Terminology: Many developers use the terms "type parameter" and "type argument"
interchangeably, but these terms are not the same. When coding, one provides type arguments in order to create a
 parameterized type. Therefore, the T in Foo<T> is a type parameter and the String in Foo<String> f is a type argument.
 This lesson observes this definition when using these terms.


//-----------------------------------------------------------------------------
Multiple Type Parameters

As mentioned previously, a generic class can have multiple type parameters. For example, the generic OrderedPair class,
 which implements the generic Pair interface:

public interface Pair<K, V> {
    public K getKey();
    public V getValue();
}

public class OrderedPair<K, V> implements Pair<K, V> {

    private K key;
    private V value;

    public OrderedPair(K key, V value) {
	this.key = key;
	this.value = value;
    }

    public K getKey()	{ return key; }
    public V getValue() { return value; }
}

//-----------------------------------------------------------------------------
Parameterized Types

You can also substitute a type parameter (i.e., K or V) with a parameterized type (i.e., List<String>). For example,
using the OrderedPair<K, V> example:

OrderedPair<String, Box<Integer>> p = new OrderedPair<>("primes", new Box<Integer>(...));

//-----------------------------------------------------------------------------
Generic Methods

Generic methods are methods that introduce their own type parameters. This is similar to declaring a generic type, but
 the type parameter's scope is limited to the method where it is declared. Static and non-static generic methods are
  allowed, as well as generic class constructors.

The syntax for a generic method includes a type parameter, inside angle brackets, and appears before the method's
return type. For static generic methods, the type parameter section must appear before the method's return type.

The Util class includes a generic method, compare, which compares two Pair objects:

public class Util {
    public static <K, V> boolean compare(Pair<K, V> p1, Pair<K, V> p2) {
        return p1.getKey().equals(p2.getKey()) &&
               p1.getValue().equals(p2.getValue());
    }
}

//-----------------------------------------------------------------------------
Bounded Type Parameters

There may be times when you want to restrict the types that can be used as type arguments in a parameterized type. For
 example, a method that operates on numbers might only want to accept instances of Number or its subclasses. This is
 what bounded type parameters are for.

To declare a bounded type parameter, list the type parameter's name, followed by the extends keyword, followed by its
 upper bound, which in this example is Number. Note that, in this context, extends is used in a general sense to mean
 either "extends" (as in classes) or "implements" (as in interfaces).

 public <U extends Number> void inspect(U u){
    System.out.println("T: " + t.getClass().getName());
    System.out.println("U: " + u.getClass().getName());
}

//-----------------------------------------------------------------------------
Multiple Bounds

The preceding example illustrates the use of a type parameter with a single bound, but a type parameter can have
multiple bounds:

<T extends B1 & B2 & B3>
A type variable with multiple bounds is a subtype of all the types listed in the bound. If one of the bounds is a class,
 it must be specified first. For example:

Class A { /* ... */ }
interface B { /* ... */ }
interface C { /* ... */ }

class D <T extends A & B & C> { /* ... */ }
If bound A is not specified first, you get a compile-time error:

class D <T extends B & A & C> { /* ... */ }  // compile-time error

//-----------------------------------------------------------------------------
Generic Methods and Bounded Type Parameters

Bounded type parameters are key to the implementation of generic algorithms. Consider the following method that counts
the number of elements in an array T[] that are greater than a specified element elem.

public static <T> int countGreaterThan(T[] anArray, T elem) {
    int count = 0;
    for (T e : anArray)
        if (e > elem)  // compiler error
            ++count;
    return count;
}
The implementation of the method is straightforward, but it does not compile because the greater than operator (>)
applies only to primitive types such as short, int, double, long, float, byte, and char. You cannot use the > operator
 to compare objects. To fix the problem, use a type parameter bounded by the Comparable<T> interface:

public interface Comparable<T> {
    public int compareTo(T o);
}
The resulting code will be:

public static <T extends Comparable<T>> int countGreaterThan(T[] anArray, T elem) {
    int count = 0;
    for (T e : anArray)
        if (e.compareTo(elem) > 0)
            ++count;
    return count;
}

//-----------------------------------------------------------------------------
Target Types

The Java compiler takes advantage of target typing to infer the type parameters of a generic method invocation. The
 target type of an expression is the data type that the Java compiler expects depending on where the expression appears.
  Consider the method Collections.emptyList, which is declared as follows:

static <T> List<T> emptyList();
Consider the following assignment statement:

List<String> listOne = Collections.emptyList();

//-----------------------------------------------------------------------------
Wildcards

In generic code, the question mark (?), called the wildcard, represents an unknown type. The wildcard can be used in a
variety of situations: as the type of a parameter, field, or local variable; sometimes as a return type (though it is
better programming practice to be more specific). The wildcard is never used as a type argument for a generic method
invocation, a generic class instance creation, or a supertype.

//-----------------------------------------------------------------------------
Upper Bounded Wildcards

You can use an upper bounded wildcard to relax the restrictions on a variable. For example, say you want to write a
method that works on List<Integer>, List<Double>, and List<Number>; you can achieve this by using an upper bounded
wildcard.

To declare an upper-bounded wildcard, use the wildcard character ('?'), followed by the extends keyword, followed by
its upper bound. Note that, in this context, extends is used in a general sense to mean either "extends" (as in classes)
 or "implements" (as in interfaces).

To write the method that works on lists of Number and the subtypes of Number, such as Integer, Double, and Float, you
would specify List<? extends Number>. The term List<Number> is more restrictive than List<? extends Number> because the
former matches a list of type Number only, whereas the latter matches a list of type Number or any of its subclasses.

Consider the following process method:

public static void process(List<? extends Foo> list) { /* ... */ }
The upper bounded wildcard, <? extends Foo>, where Foo is any type, matches Foo and any subtype of Foo. The process
method can access the list elements as type Foo:

public static void process(List<? extends Foo> list) {
    for (Foo elem : list) {
        // ...
    }
}

//-----------------------------------------------------------------------------
Unbounded Wildcards

The unbounded wildcard type is specified using the wildcard character (?), for example, List<?>. This is called a list
of unknown type. There are two scenarios where an unbounded wildcard is a useful approach:

If you are writing a method that can be implemented using functionality provided in the Object class.
When the code is using methods in the generic class that don't depend on the type parameter. For example, List.size or
List.clear. In fact, Class<?> is so often used because most of the methods in Class<T> do not depend on T.
Consider the following method, printList:

public static void printList(List<Object> list) {
    for (Object elem : list)
        System.out.println(elem + " ");
    System.out.println();
}
The goal of printList is to print a list of any type, but it fails to achieve that goal — it prints only a list of
Object instances; it cannot print List<Integer>, List<String>, List<Double>, and so on, because they are not subtypes
of List<Object>. To write a generic printList method, use List<?>:

public static void printList(List<?> list) {
    for (Object elem: list)
        System.out.print(elem + " ");
    System.out.println();
}

It's important to note that List<Object> and List<?> are not the same. You can insert an Object, or any subtype of
Object, into a List<Object>. But you can only insert null into a List<?>. The Guidelines for Wildcard Use section has
more information on how to determine what kind of wildcard, if any, should be used in a given situation.

//-----------------------------------------------------------------------------
Lower Bounded Wildcards

The Upper Bounded Wildcards section shows that an upper bounded wildcard restricts the unknown type to be a specific
type or a subtype of that type and is represented using the extends keyword. In a similar way, a lower bounded wildcard
restricts the unknown type to be a specific type or a super type of that type.

A lower bounded wildcard is expressed using the wildcard character ('?'), following by the super keyword, followed by
its lower bound: <? super A>.

Note: You can specify an upper bound for a wildcard, or you can specify a lower bound, but you cannot specify both.
Say you want to write a method that puts Integer objects into a list. To maximize flexibility, you would like the
method to work on List<Integer>, List<Number>, and List<Object> — anything that can hold Integer values.

To write the method that works on lists of Integer and the supertypes of Integer, such as Integer, Number, and Object,
you would specify List<? super Integer>. The term List<Integer> is more restrictive than List<? super Integer> because
the former matches a list of type Integer only, whereas the latter matches a list of any type that is a supertype of
Integer.

The following code adds the numbers 1 through 10 to the end of a list:

public static void addNumbers(List<? super Integer> list) {
    for (int i = 1; i <= 10; i++) {
        list.add(i);
    }
}
The Guidelines for Wildcard Use section provides guidance on when to use upper bounded wildcards and when to use lower
bounded wildcards.

//-----------------------------------------------------------------------------
Guidelines for Wildcard Use

One of the more confusing aspects when learning to program with generics is determining when to use an upper bounded
wildcard and when to use a lower bounded wildcard. This page provides some guidelines to follow when designing your
code.

For purposes of this discussion, it is helpful to think of variables as providing one of two functions:

An "In" Variable
An "in" variable serves up data to the code. Imagine a copy method with two arguments: copy(src, dest). The src
argument provides the data to be copied, so it is the "in" parameter.
An "Out" Variable
An "out" variable holds data for use elsewhere. In the copy example, copy(src, dest), the dest argument accepts data,
 so it is the "out" parameter.
Of course, some variables are used both for "in" and "out" purposes — this scenario is also addressed in the
guidelines.

You can use the "in" and "out" principle when deciding whether to use a wildcard and what type of wildcard is
appropriate. The following list provides the guidelines to follow:

Wildcard Guidelines:
An "in" variable is defined with an upper bounded wildcard, using the extends keyword.
An "out" variable is defined with a lower bounded wildcard, using the super keyword.
In the case where the "in" variable can be accessed using methods defined in the Object class, use an unbounded
wildcard.
In the case where the code needs to access the variable as both an "in" and an "out" variable, do not use a wildcard.
These guidelines do not apply to a method's return type. Using a wildcard as a return type should be avoided because it
forces programmers using the code to deal with wildcards.

A list defined by List<? extends ...> can be informally thought of as read-only, but that is not a strict guarantee

